(define (average a b)
  (/ (+ a b)
     2))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0))

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
               1.0))

(define (quad-root x)
  (fixed-point ((repeated average-damp 2) (lambda (y) (/ x (cube y))))
               1.0))

(define (pent-root x)
  (fixed-point ((repeated average-damp 2) (lambda (y) (/ x (* y y y y))))
               1.0))

(define (hex-root x)
  (fixed-point ((repeated average-damp 2) (lambda (y) (/ x (* y y y y y))))
               1.0))

(define (seventh-root x)
  (fixed-point ((repeated average-damp 2) (lambda (y) (/ x (* y y y y y y))))
               1.0))

(define (eighth-root x)
  (fixed-point ((repeated average-damp 3) (lambda (y) (/ x (* y y y y y y y))))
               1.0))

(define (fifteenth-root x)
  (fixed-point ((repeated average-damp 3) (lambda (y) (/ x (* y y y y y y y y y y y y y y))))
               1.0))

(define (sixteenth-root x)
  (fixed-point ((repeated average-damp 4) (lambda (y) (/ x (* y y y y y y y y y y y y y y y))))
               1.0))

(define (find-nearest-damp n)
  (define (find-nearest-base-of-2 n current exponent)
    (if (< n current)
        exponent
        (find-nearest-base-of-2 n (* current 2) (inc exponent))))
  (find-nearest-base-of-2 n 2 0))

(define (power x n)
  (if (= n 1)
      x
      (* x (power x (- n 1)))))

(define (nth-root n x)
  (fixed-point ((repeated average-damp (find-nearest-damp n))
                (lambda (y)
                  (/ x (power y (- n 1)))))
               1.0))

(sixteenth-root 43046721)
> 3.0

(nth-root 16 43046721)
> 3.0

(nth-root 7 78125)
> 5.0000
