(define (filtered-accumulate predicate combiner null-value term a next b)
  (if (> a b)
      null-value
      (if (predicate (term a))
          (combiner (term a)
                    (filtered-accumulate predicate combiner null-value term (next a) next b))
          (filtered-accumulate predicate combiner null-value term (next a) next b))))
          

a.
(define (prime? n)
  (= n (smallest-divisor n)))

(define (sum-of-primes-squared a b)
  (filtered-accumulate prime? + 0 square a inc b))

b.
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (product-of-primes-less-than-n n)
  (define (relatively-prime? a)
    (= 1 (gcd a n)))
  (filtered-accumulate relatively-prime? * 1 identity 1 inc n))
